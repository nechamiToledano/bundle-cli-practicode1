using System.CommandLine;
using System.CommandLine.Invocation;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;


var rootCommand = new RootCommand("Root command for file bundler CLI");

// Supported file extensions
Dictionary<string, string> validExtensions =
new Dictionary<string, string>(){
        {"c#", "cs"},
        {"c++", "cpp"},
        {"c", "c"} ,
        {"java", "java"},
        {"python", "py"},
        {"javaScript", "js" },
        {"html", "html"},
        {"css", "css"},
        {"assembly","asm" },
        {"typeScript","ts" },
        {"sql","sql" }
};
// Define the 'bundle' command
var bundleCommand = new Command("bundle", "Bundle code files into a single file");

// Options for the 'bundle' command
var languageOption = new Option<string[]>(
    aliases: new[] { "--language", "-l" },
    description: "Programming languages to include (use 'all' to include all code files)."
)
{
    AllowMultipleArgumentsPerToken = true,
    IsRequired = true
};
bundleCommand.AddOption(languageOption);

var outputOption = new Option<FileInfo>(
    aliases: new[] { "--output", "-o" },
    description: "File path and name."
)
{
    IsRequired = true
};
bundleCommand.AddOption(outputOption);

var noteOption = new Option<bool>(
    aliases: new[] { "--note", "-n" },
    getDefaultValue: () => false,
    description: "Include a note in the bundle file with the code source and relative path."
);
bundleCommand.AddOption(noteOption);

var authorOption = new Option<string>(
    aliases: new[] { "--author", "-a" },
    description: "Include the author's name at the top of the bundle file."
);
bundleCommand.AddOption(authorOption);

var sortOption = new Option<string>(
    aliases: new[] { "--sort", "-s" },
    getDefaultValue: () => "a",
    description: "Sort the code files by order ('a' to 'alphabetical' or 't' to 'type')."
);
bundleCommand.AddOption(sortOption);

var removeEmptyLinesOption = new Option<bool>(
    aliases: new[] { "--remove-empty-lines", "-r" },
    getDefaultValue: () => false,
    description: "Clean the empty lines from the source code."
);
bundleCommand.AddOption(removeEmptyLinesOption);

// Set handler for 'bundle' command
bundleCommand.SetHandler((string[] languages, FileInfo output, bool note, string author, string sort, bool removeEmptyLines) =>
{
    try
    {
        // Validate languages
        if (!languages.Contains("all"))
        {
            languages = languages.Select(lang => lang.ToLower()).ToArray();

            var invalidLanguages = languages.Where(lang => !validExtensions.Keys.Contains(lang)).ToArray();
            if (invalidLanguages.Any())
            {
                Console.WriteLine($"Invalid languages: {string.Join(", ", invalidLanguages)}");
                languages = languages.Where(lang => !invalidLanguages.Contains(lang)).ToArray();
            }
        }
        if (sort != "t" && sort != "a")
        {
            Console.WriteLine("Error: Invalid sort option. Use 'a' to 'alphabetical' or 't' to 'type'.");
            return;
        }
        // Create the output file
        using var writer = new StreamWriter(output.FullName);

        // Add author note if provided
        if (!string.IsNullOrEmpty(author))
        {
            writer.WriteLine($"// Author: {author}");
        }

        writer.WriteLine("// Bundled file generated by the CLI tool");

        // Get files to include
        var searchPatterns = languages.Contains("all") ? validExtensions.Select(lang => $"*.{lang.Value}").ToArray() : languages.Select(lang => $"*.{validExtensions[lang]}");
        var files = searchPatterns
            .SelectMany(pattern => Directory.GetFiles(Directory.GetCurrentDirectory(), pattern, SearchOption.AllDirectories))
            .ToList();

        if (files.Count == 0)
        {
            Console.WriteLine("No files found matching the specified languages.");
            return;
        }

        // Sort files
        files = sort switch
        {
            "a" => files.OrderBy(Path.GetFileName).ToList(),
            "t" => files.OrderBy(file => Path.GetExtension(file)).ToList(),
            _ => files
        };

        // Copy content from files to the bundle file
        foreach (var file in files)
        {
            var relativePath = Path.GetRelativePath(Directory.GetCurrentDirectory(), file);

            if (note)
            {
                writer.WriteLine($"// Source: {relativePath}");
            }

            var content = File.ReadAllLines(file);

            // Remove empty lines if the option is enabled
            if (removeEmptyLines)
            {
                content = content.Where(line => !string.IsNullOrWhiteSpace(line)).ToArray();
            }

            foreach (var line in content)
            {
                writer.WriteLine(line);
            }

            writer.WriteLine(); // Add a blank line between files
        }

        Console.WriteLine($"Bundled {files.Count} file(s) into {output.FullName}");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error: {ex.Message}");
    }
}, languageOption, outputOption, noteOption, authorOption, sortOption, removeEmptyLinesOption);

rootCommand.AddCommand(bundleCommand);

// Define the 'create-rsp' command
var createRspCommand = new Command("create-rsp", "Create a response file with a ready command");

var rspOutputOption = new Option<FileInfo>(
    aliases: new[] { "--output", "-o" },
    description: "Path for the response file."
)
{ IsRequired = true };
createRspCommand.AddOption(rspOutputOption);

createRspCommand.SetHandler((FileInfo rspOutput) =>
{
    Console.WriteLine("Enter values for the following options:");

    Console.Write("Language (e.g., 'all' or 'csharp java'): ");
    var languages = Console.ReadLine() ?? "";

    Console.Write("Output file path (e.g., 'bundle.cs'): ");
    var output = Console.ReadLine() ?? "";

    Console.Write("Include a note (true/false): ");
    var noteInput = Console.ReadLine()?.ToLower() == "true";

    Console.Write("Author (optional, press Enter to skip): ");
    var author = Console.ReadLine();

    Console.Write("Sort order (a-alphabetical/t-type): ");
    var sort = Console.ReadLine() ?? "a";

    Console.Write("Remove empty lines (true/false): ");
    var removeEmptyLinesInput = Console.ReadLine()?.ToLower() == "true";

    // Construct the command
    var rspCommand = $"fbnd --language {languages} --output {output} --note {noteInput} --sort {sort} --remove-empty-lines {removeEmptyLinesInput}";
    if (!string.IsNullOrEmpty(author))
    {
        rspCommand += $" --author \"{author}\"";
    }

    try
    {
        File.WriteAllText(rspOutput.FullName, rspCommand);
        Console.WriteLine($"Response file created at {rspOutput.FullName}");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error: {ex.Message}");
    }
}, rspOutputOption);

rootCommand.AddCommand(createRspCommand);

// Execute the root command
await rootCommand.InvokeAsync(args);

